int _lockObject = -1;

// convert angle from range [-PI, PI] to [0, 2PI]
float convertToAbsoluteAngle(float angle) {
    return angle < 0 ? 2 * PI + angle : angle;
}

// compute center of a point array
Point center(ref Point arrPoint, int n) {
    int i = 0;
    Point totalPoint = arrPoint[i++];
    while( i < n ) {
        totalPoint += arrPoint[i++];
    }
    
    return totalPoint/(i * 1.0f);
}

// return min value
float min(float a, float b) {
    return (b < a) ? b : a;
}

// distance square of two points
float distanceSquare(Point P, Point Q) {
    u = Q - P;
    return u.x * u.x + u.y * u.y;
}

// return index of nearest object in a GameObject array
int findNearestObject(ref GameObject gameObjects, int n) {
    // center point of this tank is always at center of coordinate system.
    Point basePoint = {0,0};
    
    int objectIndex = -1;
    int i = 0;
    // set min distance is a very large number
    float minDistance = 1000000.0f;
    float distance = -1;
    
    Point objectCenter;
    while(i < n) {
        gameObject = gameObjects[i];
        if(isEnemy(gameObject.id)) {
            ref Point points = gameObject.shape.data;
            objectCenter = center(points, gameObject.shape.count);
            distance = distanceSquare(objectCenter, basePoint);
            if(minDistance > distance) {
                minDistance = distance;
                objectIndex = i;
            }
        }
        i++;
    }
    
    return objectIndex;
}

// update function, the game platform call it each logical controlling frame.
void update(float t) {
    freeze();
    // game objects captured by camera
    cameraSnapshots = getCameraSnapshot();
    
    int n = cameraSnapshots.count;
    ref GameObject gameObjects = cameraSnapshots.data;
    
    // game objects capture by radars
    radarSnapshots = getRadarSnapshot();
    
    // collisions detected between last frame to current frame
    collisions = getCollisions();
    
    Ray gunVector = gun();
    gunDir = gunVector.dir;
    
    int lockObjectIdx = -1;
    
    if(_lockObject == -1) {
        lockObjectIdx = findNearestObject(gameObjects, n);
        if(lockObjectIdx >= 0) {
            _lockObject = gameObjects[lockObjectIdx].id;
        }
    }
    else {
        int i = 0;
        while(i < n) {
            gameObject = gameObjects[i];
            if(_lockObject == gameObject.id) {
               lockObjectIdx = i;
            }
            i++;
        }
        
        if(lockObjectIdx == -1) {
            _lockObject = -1;
        }
    }
    
    if(lockObjectIdx >= 0) {
        GameObject gameObject = gameObjects[lockObjectIdx];
        ref Point points = gameObject.shape.data;
        objectCenter = center(points, gameObject.shape.count);
        objectCenter -= gunVector.start;
    
        float angle_ = angle(objectCenter, gunDir);
        
        if(angle_ < 0) {
            rotateGun(ROTATE_LEFT);
        }
        else if(angle_ > 0){
            rotateGun(ROTATE_RIGHT);
        }
        
        if( abs(angle_) * 180 / PI < 5.0f) {
            fire();
        }
        //println(L"gun angle = " + angle_ * 180 / PI);
        //println(L"object pos = " + String(objectCenter));
    }
    else {
        turn(TURN_LEFT);
    }
    
    //rotateGun(ROTATE_LEFT);
}

// setup function, called once right after the Tank is created.
void setup() {
    previousT = getTime() - 1;
    println(L"script has been setup");
}

// cleanup function, called once right before the Tank is destroyed.
void cleanup() {
    println(L"script has been cleanup");
}
