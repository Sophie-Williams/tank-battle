float previousT = -1;

float lastMoveAction;
float moveChangingDuration;

float lastTurnAction;
float turnChangingDuration;

float lastRotateGunAction;
float rotateGunChangingDuration;

array<MovingDir,3> movingDirs = {NO_MOVE, MOVE_FORWARD, MOVE_BACKWARD};
array<TurningDir,3> turningDirs = {NO_TURN, TURN_LEFT, TURN_RIGHT};
array<RotatingDir,5> rotatingDirs = {NO_ROTATE, ROTATE_LEFT, NO_ROTATE, ROTATE_RIGHT, NO_ROTATE};

// convert angle from range [-PI, PI] to [0, 2PI]
float convertToAbsoluteAngle(float angle) {
    return angle < 0 ? 2 * PI + angle : angle;
}

Point center(ref Point arrPoint, int n) {
    int i = 0;
    Point totalPoint = arrPoint[i];
    i++;
    //while( i < n ) {
    //    totalPoint += arrPoint[i];
    //    i++;
    //}
    
    return totalPoint/(i * 1.0f);
}

float min(float a, float b) {
    return (b < a) ? b : a;
}

void update(float t) {
    freeze();
    
    // game objects captured by camera
    cameraSnapshots = getCameraSnapshot();
    
    // game objects capture by radars
    radarSnapshots = getRadarSnapshot();
    
    // collisions detected between last frame to current frame
    collisions = getCollisions();
    
    int n = cameraSnapshots.count;
    gameObjects = cameraSnapshots.data;
    
    Ray gunVector = gun();
    gunDir = gunVector.dir;
    
    
    if(n > 0) {
        // get the first object
        firstSeenObject = gameObjects[0];
        objectCenter = center(firstSeenObject.shape.data, firstSeenObject.shape.count);
        objectCenter -= gunVector.start;
        
        float gunAngle = convertToAbsoluteAngle(atan2(gunDir.y, gunDir.x));
        float objectAngle = convertToAbsoluteAngle(atan2(objectCenter.y, objectCenter.x));
        
        float angle_ = convertToAbsoluteAngle(angle(gunDir, objectCenter));
        
        if(angle_ < PI) {
            rotateGun(ROTATE_LEFT);
        }
        else if(angle_ > PI){
            rotateGun(ROTATE_RIGHT);
        }
        println(L"gun angle = " + angle_ * 180 / PI);
    }
    
    //rotateGun(ROTATE_LEFT);
}

void setup() {
    previousT = getTime() - 1;
    println(L"script has been setup");
}

void cleanup() {
    println(L"script has been cleanup");
}
