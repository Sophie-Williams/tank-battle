int _lockObject = -1;
int _radarLockObject = -1;
float _lastMovingDirChange = -100;
MovingDir _movingDir = NO_MOVE;

// convert angle from range [-PI, PI] to [0, 2PI]
float convertToAbsoluteAngle(float angle) {
    return angle < 0 ? 2 * PI + angle : angle;
}

// compute center of a point array
Point center(ref Point arrPoint, int n) {
    int i = 0;
    Point totalPoint = arrPoint[i++];
    while( i < n ) {
        totalPoint += arrPoint[i++];
    }
    
    return totalPoint/(i * 1.0f);
}

// return min value
float min(float a, float b) {
    return (b < a) ? b : a;
}

// distance square of two points
float distanceSquare(Point P, Point Q) {
    u = Q - P;
    return u.x * u.x + u.y * u.y;
}

// return index of nearest object in a GameObject array
int findNearestObject(ref GameObject gameObjects, int n) {
    // center point of this tank is always at center of coordinate system.
    Point basePoint = {0,0};
    
    int objectIndex = -1;
    int i = 0;
    // set min distance is a very large number
    float minDistance = 1000000.0f;
    float distance = -1;
    
    Point objectCenter;
    while(i < n) {
        gameObject = gameObjects[i];
        if(isEnemy(gameObject.id)) {
            ref Point points = gameObject.shape.data;
            objectCenter = center(points, gameObject.shape.count);
            distance = distanceSquare(objectCenter, basePoint);
            if(minDistance > distance) {
                minDistance = distance;
                objectIndex = i;
            }
        }
        i++;
    }
    
    return objectIndex;
}

// return index of earliest scanned object in a GameSnapshotObject array
int findEaliestObject(ref GameSnapshotObject gameObjects, int n) {
    // get current time
    float baseTime = getTime();
    
    int objectIndex = -1;
    int i = 0;
    // set min time distance is a very large number
    float minTimeDistance = 1000000.0f;
    float distance = -1;
    
    Point objectCenter;
    while(i < n) {
        gameObject = gameObjects[i];
        if(isEnemy(gameObject.id)) {
            distance = baseTime - gameObject.t;
            if(minTimeDistance > distance) {
                minTimeDistance = distance;
                objectIndex = i;
            }
        }
        i++;
    }
    
    return objectIndex;
}

// return index of nearest object in a GameSnapshotObject array
int findNearestObject(ref GameSnapshotObject gameObjects, int n) {
    // center point of this tank is always at center of coordinate system.
    Point basePoint = {0,0};
    
    int objectIndex = -1;
    int i = 0;
    // set min distance is a very large number
    float minDistance = 1000000.0f;
    float distance = -1;
    
    Point objectCenter;
    while(i < n) {
        gameObject = gameObjects[i];
        if(isEnemy(gameObject.id)) {
            ref Point points = gameObject.shape.data;
            objectCenter = center(points, gameObject.shape.count);
            distance = distanceSquare(objectCenter, basePoint);
            if(minDistance > distance) {
                minDistance = distance;
                objectIndex = i;
            }
        }
        i++;
    }
    
    return objectIndex;
}

void ramdomMove(float t) {
    if( t - _lastMovingDirChange > 3.0f) {
        val = random(0, 2);
        if(val == 0) {
            _movingDir = NO_MOVE;
        }
        else if(val == 1) {
            _movingDir = MOVE_FORWARD;
        }
        else {
            _movingDir = MOVE_BACKWARD;
        }
        
        _lastMovingDirChange = t;
    }
    
    move(_movingDir);
}

bool processCollisions(float t) {
    // collisions detected between last frame to current frame
    collisions = getCollisions();
    
    ramdomMove(t);
    
    // just random move and still let caller do further processing
    // by return false
    return false;
}

bool processObjectsInCamera(float t) {
    // game objects captured by camera
    cameraSnapshots = getCameraSnapshot();
    
    int n = cameraSnapshots.count;
    gameObjects = cameraSnapshots.data;
    
    Ray gunVector = gun();
    gunDir = gunVector.dir;
    
    int lockObjectIdx = -1;
    
    if(_lockObject == -1) {
        lockObjectIdx = findNearestObject(gameObjects, n);
        if(lockObjectIdx >= 0) {
            _lockObject = gameObjects[lockObjectIdx].id;
        }
    }
    else {
        int i = 0;
        while(i < n) {
            gameObject = gameObjects[i];
            if(_lockObject == gameObject.id) {
               lockObjectIdx = i;
            }
            i++;
        }
        
        if(lockObjectIdx == -1) {
            _lockObject = -1;
        }
    }
    
    if(lockObjectIdx >= 0) {
        GameObject gameObject = gameObjects[lockObjectIdx];
        ref Point points = gameObject.shape.data;
        objectCenter = center(points, gameObject.shape.count);
        objectCenter -= gunVector.start;
    
        float gunBaseAngle = angle(objectCenter, gunDir);
        
        if(gunBaseAngle < 0) {
            rotateGun(ROTATE_LEFT);
        }
        else if(gunBaseAngle > 0){
            rotateGun(ROTATE_RIGHT);
        }
        
        if( abs(gunBaseAngle) * 180 / PI < 5.0f) {
            fire();
        }
        
        return true;
    }
    
    // no enemy object in camera view, then return false to notify
    // caller do further processing
    return false;
}

bool processObjectsInRadar(float t) {
    int lockObjectIdx = -1;
    
    // game objects capture by radars
    radarSnapshots = getRadarSnapshot();
        
    gameSnapshotObjects = radarSnapshots.data;
    GameSnapshotObject gameObject;
    int n = radarSnapshots.count;
    if(_radarLockObject == -1) {
        lockObjectIdx = findEaliestObject(gameSnapshotObjects, n);
    }
    else {
        int i = 0;
        
        while(i < n) {
            if(_radarLockObject == gameSnapshotObjects[i].id) {
               lockObjectIdx = i;
            }
            i++;
        }
    }
    if(lockObjectIdx >= 0) {
        _radarLockObject = gameSnapshotObjects[lockObjectIdx].id;
        
        gameObject = gameSnapshotObjects[lockObjectIdx];
        ref Point points = gameObject.shape.data;
        objectCenter = center(points, gameObject.shape.count);
    
        float objectBaseAngle = PI/2 - atan2(objectCenter.y, objectCenter.x);
        
        if(objectBaseAngle < 0) {
            turn(TURN_LEFT);
        }
        else if(objectBaseAngle > 0){
            turn(TURN_RIGHT);
        }
        return true;
    }
    
    _radarLockObject = -1;
    return false;
}

// update function, the game platform call it each logical controlling frame.
void update(float t) {
    freeze();
    
    res = processCollisions(t);
    if(res) {return;}
    
    res = processObjectsInCamera(t);
    if(res) {return;}
    
    res = processObjectsInRadar(t);
    if(res) {return;}
}

// setup function, called once right after the Tank is created.
void setup() {
    previousT = getTime() - 1;
    println(L"script has been setup");
}

// cleanup function, called once right before the Tank is destroyed.
void cleanup() {
    println(L"script has been cleanup");
}
