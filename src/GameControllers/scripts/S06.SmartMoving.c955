int _lockObject = -1;
int _radarLockObject = -1;

MovingDir _movingDir = NO_MOVE;
TurningDir _turningDir = NO_TURN;
float _lastMovingDirChanged = -100.0f;
bool _onRunning = false;
float _lastChangedDirectionOnStick = -100.0f;
float _runOnHurtDuration = 3.0f;
float _lastCounting = -100.0f;

void countObjectToChangeDuration(float t) {
    if( t - _lastCounting < 0.5f) {
        return;
    }
    _lastCounting = t;
    
    int max_object = 15;
    array<int, 15> objectIds;
    int count = 0;
     int id;
    
    // game objects captured by camera
    cameraSnapshots = getCameraSnapshot();
    
    int n = cameraSnapshots.count;
    gameObjects = cameraSnapshots.data;
    
    int i = 0;
    // count moving game object in camera view
    while(i < n && count < max_object) {
        id = gameObjects[i].id;
        if(isEnemy(id) || isAlly(id)) {
            objectIds[count] = gameObjects[i].id;
            count++;
        }
        i++;
        
    }
    
    radarSnapshots = getRadarSnapshot();
        
    gameSnapshotObjects = radarSnapshots.data;
    n = radarSnapshots.count;
    i = 0;
    int j;
   
    // count moving game object in radar view
    while(i < n && count < max_object) {
        id = gameSnapshotObjects[i].id;
        if(isEnemy(id) || isAlly(id)) {
            j = 0;
            while(j < count) {
                if( objectIds[j] == id) {
                    break;
                }
                j++;
            }
            if(j == count) {
                objectIds[count] = gameSnapshotObjects[i].id;
                count++;
            }
        }
        i++;
    }
    if(count <= 4) {
        // always run after get hurt
        if(_runOnHurtDuration < 300000.0f) {
            _runOnHurtDuration = 300000.0f;
            println(L"keep moving mode is enable");
        }
    }
    else {
        if(_runOnHurtDuration > 3.0f) {
            // run 3 seconds after get hurt then stop
            _runOnHurtDuration = 3.0f;
            println(L"keep moving mode is disable");
        }
    }
}

// convert angle from range [-PI, PI] to [0, 2PI]
float convertToAbsoluteAngle(float angle) {
    return angle < 0 ? 2 * PI + angle : angle;
}

// compute center of a point array
Point center(ref Point arrPoint, int n) {
    int i = 0;
    Point totalPoint = arrPoint[i++];
    while( i < n ) {
        totalPoint += arrPoint[i++];
    }
    
    return totalPoint/(i * 1.0f);
}

// return min value
float min(float a, float b) {
    return (b < a) ? b : a;
}

// distance square of two points
float distanceSquare(Point P, Point Q) {
    u = Q - P;
    return u.x * u.x + u.y * u.y;
}

// return index of nearest object in a GameObject array
int findNearestObject(ref GameObject gameObjects, int n) {
    // center point of this tank is always at center of coordinate system.
    Point basePoint = {0,0};
    
    int objectIndex = -1;
    int i = 0;
    // set min distance is a very large number
    float minDistance = 1000000.0f;
    float distance = -1;
    
    Point objectCenter;
    while(i < n) {
        gameObject = gameObjects[i];
        if(isEnemy(gameObject.id)) {
            ref Point points = gameObject.shape.data;
            objectCenter = center(points, gameObject.shape.count);
            distance = distanceSquare(objectCenter, basePoint);
            if(minDistance > distance) {
                minDistance = distance;
                objectIndex = i;
            }
        }
        i++;
    }
    
    return objectIndex;
}

// return index of earliest scanned object in a GameSnapshotObject array
int findEaliestObject(ref GameSnapshotObject gameObjects, int n) {
    // get current time
    float baseTime = getTime();
    
    int objectIndex = -1;
    int i = 0;
    // set min time distance is a very large number
    float minTimeDistance = 1000000.0f;
    float distance = -1;
    
    Point objectCenter;
    while(i < n) {
        gameObject = gameObjects[i];
        if(isEnemy(gameObject.id)) {
            distance = baseTime - gameObject.t;
            if(minTimeDistance > distance) {
                minTimeDistance = distance;
                objectIndex = i;
            }
        }
        i++;
    }
    
    return objectIndex;
}

// return index of nearest object in a GameSnapshotObject array
int findNearestObject(ref GameSnapshotObject gameObjects, int n) {
    // center point of this tank is always at center of coordinate system.
    Point basePoint = {0,0};
    
    int objectIndex = -1;
    int i = 0;
    // set min distance is a very large number
    float minDistance = 1000000.0f;
    float distance = -1;
    
    Point objectCenter;
    while(i < n) {
        gameObject = gameObjects[i];
        if(isEnemy(gameObject.id)) {
            ref Point points = gameObject.shape.data;
            objectCenter = center(points, gameObject.shape.count);
            distance = distanceSquare(objectCenter, basePoint);
            if(minDistance > distance) {
                minDistance = distance;
                objectIndex = i;
            }
        }
        i++;
    }
    
    return objectIndex;
}

void justFireIfTarget() {
    // game objects captured by camera
    cameraSnapshots = getCameraSnapshot();
    
    int n = cameraSnapshots.count;
    gameObjects = cameraSnapshots.data;
    
    Ray gunVector = gun();
    gunDir = gunVector.dir;
    
    int i = 0;
    while(i < n) {
        gameObject = gameObjects[i];
        if(isEnemy(gameObject.id)) {
            ref Point points = gameObject.shape.data;
            objectCenter = center(points, gameObject.shape.count);
            objectCenter -= gunVector.start;
    
            gunBaseAngle = angle(objectCenter, gunDir);
            if( abs(gunBaseAngle) <= 0.1f) {
                fire();
                break;
            }
        }
        i++;
    }
}

void checkToFireToTarget(Point target) {
    Ray gunVector = gun();
    gunDir = gunVector.dir;
    
    GeneralLine gunLine = {gunVector.start, gunDir};
    Point nomalDirVector;
    nomalDirVector.x = -gunDir.y;
    nomalDirVector.y = gunDir.x;
    GeneralLine gunNormalLine = {gunVector.start, nomalDirVector};

    float directionalDistance = distance(gunLine, target);
    if( compute(gunNormalLine, target) < 0.0f &&  abs(directionalDistance) < 0.5f) {
        fire();
    }
    else {
        target -= gunVector.start;
        float gunBaseAngle = angle(target, gunDir);
        if(gunBaseAngle < 0) {
            rotateGun(ROTATE_LEFT);
        }
        else if(gunBaseAngle > 0){
            rotateGun(ROTATE_RIGHT);
        }
    }
}

array<bool, 10> _frameStates;
int MAX_FRAME_STATE_COUNT = 10;
int _currentState = 0;
bool _onStick = false;

void resetFrameState() {
    int i = 0;
    while(i < MAX_FRAME_STATE_COUNT) {
        _frameStates[i] = false;
        i++;
    }
    
    _onStick = false;
    _currentState = 0;
}

void detectSticking() {
    // collisions detected between last frame to current frame
    collisionSnapshots = getCollisions();
    
    int n = collisionSnapshots.count;
    collisions = collisionSnapshots.data;
    int i = 0;
    bool collisionDetected = false;
    while(i < n) {
        if(collisions[i].isExplosion == false) {
            collisionDetected = true;
            break;
        }
        i++;
    }
    
    if(_currentState >= MAX_FRAME_STATE_COUNT) {
        _currentState = 0;
    }
    _frameStates[_currentState++] = collisionDetected;
    
    int colissionFrameCount = 0;
    i = 0;
    while(i < MAX_FRAME_STATE_COUNT) {
        if(_frameStates[i]) {
            colissionFrameCount ++;
        }
        i++;
    }
    
    _onStick = float(colissionFrameCount)/MAX_FRAME_STATE_COUNT >= 0.5f;
}

bool processCollisions(float t) {
    // collisions detected between last frame to current frame
    collisionSnapshots = getCollisions();
    
    int n = collisionSnapshots.count;
    collisions = collisionSnapshots.data;
    int i = 0;
    while(i < n) {
        if(collisions[i].isExplosion) {
            break;
        }
        i++;
    }
    
    if(i < n) {
        CollisionPosition hitPosition = collisions[i].position;
        _movingDir = NO_MOVE;
        _turningDir = NO_TURN;
        if(hitPosition == HIT_FRONT) {
            // step back if there is an explosion ahead
            _movingDir = MOVE_BACKWARD;
            _turningDir = TURN_LEFT;
        }
        else if(hitPosition == HIT_BOTTOM) {
            // step forward if there is an explosion behind
            _movingDir = MOVE_FORWARD;
            _turningDir = TURN_RIGHT;
        }
        else if(hitPosition == HIT_LEFT || hitPosition == HIT_RIGHT) {
            // step forward if there is an explosion behind
            if(random(0,1) == 0) {
                _movingDir = MOVE_BACKWARD;
            }
            else {
                _movingDir = MOVE_FORWARD;
            }
        }
        
        if(_movingDir != NO_MOVE) {
            _onRunning = true;
            _lastMovingDirChanged = t;
            move(_movingDir);
            turn(_turningDir);
            println("Oops! that's hurt.");
        }
        // reset time of change direction on stick to allow resolving sticking state later
        // if not reset this variable, the tank cannot change direction while sticking and being fired.
        _lastChangedDirectionOnStick = -100.0f;
        return true;
    }
    // if the tank is not get hurt at this frame
    // return false to caller do further processing
    return false;
}

bool processObjectsInCamera(float t) {
    // game objects captured by camera
    cameraSnapshots = getCameraSnapshot();
    
    int n = cameraSnapshots.count;
    gameObjects = cameraSnapshots.data;
    
    int lockObjectIdx = -1;
    
    if(_lockObject == -1) {
        lockObjectIdx = findNearestObject(gameObjects, n);
        if(lockObjectIdx >= 0) {
            _lockObject = gameObjects[lockObjectIdx].id;
        }
    }
    else {
        int i = 0;
        while(i < n) {
            gameObject = gameObjects[i];
            if(_lockObject == gameObject.id) {
               lockObjectIdx = i;
            }
            i++;
        }
        
        if(lockObjectIdx == -1) {
            _lockObject = -1;
        }
    }
    
    if(lockObjectIdx >= 0) {
        GameObject gameObject = gameObjects[lockObjectIdx];
        ref Point points = gameObject.shape.data;
        objectCenter = center(points, gameObject.shape.count);
        
        checkToFireToTarget(objectCenter);
        
        return true;
    }
    
    // no enemy object in camera view, then return false to notify
    // caller do further processing
    return false;
}

Point objectDir = {0.0f, 1.0f};
bool processObjectsInRadar(float t) {
    int lockObjectIdx = -1;
    
    // game objects capture by radars
    radarSnapshots = getRadarSnapshot();
        
    gameSnapshotObjects = radarSnapshots.data;
    GameSnapshotObject gameObject;
    int n = radarSnapshots.count;
    if(_radarLockObject == -1) {
        //lockObjectIdx = findEaliestObject(gameSnapshotObjects, n);
        lockObjectIdx = findNearestObject(gameSnapshotObjects, n);
    }
    else {
        int i = 0;
        
        while(i < n) {
            if(_radarLockObject == gameSnapshotObjects[i].id) {
               lockObjectIdx = i;
            }
            i++;
        }
    }
    if(lockObjectIdx >= 0) {
        _radarLockObject = gameSnapshotObjects[lockObjectIdx].id;
        
        gameObject = gameSnapshotObjects[lockObjectIdx];
        ref Point points = gameObject.shape.data;
        objectCenter = center(points, gameObject.shape.count);
    
        float objectBaseAngle = gunBaseAngle = angle(objectCenter, objectDir);
        
        if(objectBaseAngle < 0) {
            _turningDir = TURN_LEFT;
        }
        else if(objectBaseAngle > 0){
            _turningDir = TURN_RIGHT;
        }
        
        turn(_turningDir);
        if(_onStick) {
            checkToFireToTarget(objectCenter);
            if(t - _lastChangedDirectionOnStick > 2.0f) {
                if(_movingDir == NO_MOVE || _movingDir == MOVE_BACKWARD) {
                    _movingDir = MOVE_FORWARD;
                }
                else {
                    _movingDir = MOVE_BACKWARD;
                }
                _lastChangedDirectionOnStick = t;
            }
        }
        //println("processObjectsInRadar at _onStick = " + _onStick);
        return true;
    }
    
    _radarLockObject = -1;
    return false;
}


void runAndCheckToFire(float t) {
    move(_movingDir);
    turn(_turningDir);
    
    // collisions detected between last frame to current frame
    collisionSnapshots = getCollisions();
    
    int n = collisionSnapshots.count;
    collisions = collisionSnapshots.data;
    int i = 0;
    while(i < n) {
        if(collisions[i].isExplosion) {
            break;
        }
        i++;
    }
    
    // update running duration if get hurt while running
    if(i < n) {
        CollisionPosition hitPosition = collisions[i].position;
        if(hitPosition == HIT_LEFT && _movingDir == MOVE_BACKWARD) {
            _turningDir = TURN_RIGHT;
        }
        else if(hitPosition == HIT_RIGHT && _movingDir == MOVE_FORWARD) {
            // step forward if there is an explosion behind
            _movingDir = MOVE_FORWARD;
            _turningDir = TURN_LEFT;
        }
        
        _onRunning = true;
        _lastMovingDirChanged = t;
        println(L"Ouch!");
    }
    
    if(processObjectsInCamera(t) == false) {
        processObjectsInRadar(t);
    }
    
    if(t - _lastMovingDirChanged > _runOnHurtDuration) {
        _onRunning = false;
        _movingDir = NO_MOVE;
    }
}


void updateInternal(float t) {
    freeze();
    
    if(_onRunning) {
        runAndCheckToFire(t);
        return;
    }
    
    res = processCollisions(t);
    if(res) {return;}
    
    res = processObjectsInCamera(t);
    if(res) {return;}
    
    res = processObjectsInRadar(t);
    if(res) {return;}
}

// update function, the game platform call it each logical controlling frame.
void update(float t) {
    countObjectToChangeDuration(t);
    detectSticking();
    
    updateInternal(t);
    
    if(_onStick && t - _lastChangedDirectionOnStick > 2.0f) {
        // try to make new move to solve sticking state
        if(_movingDir == MOVE_BACKWARD) {
            _movingDir = MOVE_FORWARD;
        }
        else if(_movingDir == MOVE_FORWARD) {
            _movingDir = MOVE_BACKWARD;
        }
        else {
            if(_turningDir == TURN_LEFT) {
                _turningDir = TURN_RIGHT;
            }
            else if(_turningDir == TURN_RIGHT) {
                _turningDir = TURN_LEFT;
            }
        }
        _lastChangedDirectionOnStick = t;
        // reset frame state after change the moving or turning direction
        //resetFrameState();
    }
}

// setup function, called once right after the Tank is created.
void setup() {
    // set each frame in frame state array is free state
    resetFrameState();
    
    println(L"script has been setup");
}

// cleanup function, called once right before the Tank is destroyed.
void cleanup() {
    println(L"script has been cleanup");
}
